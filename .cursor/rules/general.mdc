---
description: 
globs: 
alwaysApply: true
---
# General Project Guidelines

## Summary for Agent Requests

Core project overview, principles, and operational guidelines covering the project's purpose, underlying technologies, parameter resolution patterns, workflow modes (Normal and Development), and the standard interaction workflow for implementing features and changes.

## 1. Project Overview

This project implements a specialized **MCP (Model Context Protocol) Server** ([MCP Introduction](mdc:https:/modelcontextprotocol.io/introduction)) designed to streamline GitHub project management workflows. It is built using the official MCP Python SDK ([`modelcontextprotocol/python-sdk`](mdc:https:/github.com/modelcontextprotocol/python-sdk)).

**Inspiration and Motivation:**
The server's functionality is heavily inspired by the official GitHub MCP Server ([`github/github-mcp-server`](mdc:https:/github.com/github/github-mcp-server)). However, this project was created specifically to address the lack of integration with the GitHub Projects API ([`gh project` CLI Manual](mdc:https:/cli.github.com/manual/gh_project)) in the official server.

**Functionality:**
This server aims to provide comprehensive GitHub interaction capabilities, including:
*   Standard GitHub operations (managing issues, pull requests, branches - similar to the official server).
*   **Extended functionality for GitHub Projects**, enabling the creation, retrieval, listing, and modification of project items and fields.

**Goal:**
The primary goal is to function as an intelligent **GitHub Project Manager**. By interpreting user requests, the server aims to automate the process of creating related issues, managing tasks, updating project boards, and opening pull requests, allowing developers to focus more on coding.

**Core Philosophy:**
*   **Convention over Configuration:** The server prioritizes sensible defaults for common parameters (e.g., default priority for tasks). Users can configure these defaults to minimize the input required for routine actions.
*   **Intelligent Parameter Handling:** The server attempts to extract all necessary information from the user's input first. If required parameters are missing, it consults the configured defaults. Only if essential parameters remain unresolved should the interacting MCP client prompt the user for clarification. This balances automation with user control, acknowledging the collaborative role between the MCP server (providing tools and defaults) and the MCP client (managing user interaction and final parameter gathering).

## 2. Core Principles & Technologies
-   **Language:** Python 3.11+
-   **Package Management:** Poetry (`uv` preferred if available via Poetry)
-   **Code Style:** Ruff for formatting and linting. Adhere to standard Python conventions (PEP 8). (See `python-standards.mdc` for details)
-   **Core Principle:** Prioritize clean, readable, maintainable, and well-tested code.

## 3. Parameter Resolution Pattern (`resolve_param` & `TOOL_PARAM_CONFIG`)

This project uses a specific pattern for resolving optional tool parameters, allowing values to come from runtime arguments, environment variables, or defaults defined in `src/gh_project_manager_mcp/config.py`.

-   **Mechanism:** Uses the `utils.gh_utils.resolve_param` function.
-   **Configuration:** Relies on the `TOOL_PARAM_CONFIG` dictionary defined in `src/gh_project_manager_mcp/config.py`.
-   **Mandatory Update:** When implementing/modifying a tool function that uses `resolve_param` for an optional parameter, the corresponding entry in `TOOL_PARAM_CONFIG` MUST be added or updated.
-   **Type Specification:** EVERY parameter definition in `TOOL_PARAM_CONFIG` MUST include a `'type'` key (`'str'`, `'int'`, `'list'`, `'bool'`). Use `'type': 'str'` if no specific handling is needed but the parameter exists in the config.
-   **`gh` CLI Verification:** Cross-reference `gh` command documentation to ensure parameter types specified in `TOOL_PARAM_CONFIG` match the expected CLI behavior, as the resolved value will eventually be passed to the `gh` command.

## 4. Operational & Workflow Guidelines

### 4.1. Terminal Commands

-   **Automatic Execution:** Propose and then automatically execute necessary terminal commands (dependency installation, server execution, etc.) unless specifically instructed otherwise. Do not wait for manual execution.
-   **Output Analysis:** After EVERY terminal command execution, carefully analyze the *entire* stdout, stderr, and exit code. Report any errors, warnings, or unexpected output before proceeding. Do not assume success based solely on a zero exit code.
-   **Retry Transient Errors:** If a command (especially network-dependent ones like `docker build`, `poetry install`) fails with a clearly transient network/DNS error (e.g., 'Could not resolve host', 'Temporary failure in name resolution', 'lookup ... no such host'), announce a retry, wait ~5 seconds, and retry **up to two times** (3 attempts total). Report persistent errors after retries.
