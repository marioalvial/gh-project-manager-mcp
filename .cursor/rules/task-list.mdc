---
description: 
globs: tasks/*
alwaysApply: false
---
# Task List Management

Guidelines for creating and managing task lists in markdown files to track project progress

## Task List Creation

1. Create task lists in a markdown file (in the `{project_root}/tasks` directory):
   - Use `TASKS.md` or a descriptive name relevant to the feature (e.g., `FEATURE_X.md`)
   - Include a clear title and description of the feature being implemented

2. Structure the file with these sections:
   ```markdown
   # Feature Name Implementation
   
   Brief description of the feature and its purpose.
   
   ## Completed Tasks
   
   - [x] Task 1 implementation
   - [x] Add tests for Task 1
   - [x] Task 2 implementation
   - [x] Add tests for Task 2
   
   ## In Progress Tasks

   *(Ordered list - complete sequentially)*
   - [ ] Task 3 implementation
   - [ ] Add tests for Task 3
   - [ ] Task 4 implementation
   - [ ] Add tests for Task 4
   
   ## Future Tasks
   
   *(Ordered list - complete sequentially)*
   - [ ] Task 5 implementation
   - [ ] Add tests for Task 5
   - [ ] Task 6 implementation
   - [ ] Add tests for Task 6
   
   ## Implementation Plan
   
   Detailed description of how the feature will be implemented.
   
   ### Relevant Files
   
   - path/to/file1.ts - Description of purpose
   - path/to/file2.ts - Description of purpose
   ```

## Task List Maintenance

1. Update the task list as you progress:
   - **Sequential Execution:** Complete tasks listed under "In Progress" and "Future Tasks" **strictly in the order they appear**. Do not skip tasks.
   - **Implementation & Testing Pairing:** Each feature/component implementation task **MUST** be immediately followed by a corresponding task to "Add tests for [feature/component]". Both must be completed before moving to the next implementation task.
   - Mark tasks as completed by changing `[ ]` to `[x]`.
   - Add new tasks *in the correct ordered sequence* as they are identified.
   - Move completed task pairs (implementation + test) to the "Completed Tasks" section.

2. Keep "Relevant Files" section updated with:
   - File paths that have been created or modified
   - Brief descriptions of each file's purpose
   - Status indicators (e.g., âœ…) for completed components

3. Add implementation details:
   - Architecture decisions
   - Data flow descriptions
   - Technical components needed
   - Environment configuration

## AI Instructions

When working with task lists, the AI should:

1. **Strictly follow the task order** within "In Progress" and "Future Tasks".
2. **Always implement the tests immediately after the corresponding feature/component.**
3. Regularly update the task list file after completing *both* an implementation task and its corresponding test task.
4. Mark completed task pairs with [x] when finished.
5. Add newly discovered tasks in the correct sequence.
6. Maintain the "Relevant Files" section accurately.
7. Document implementation details.
8. When starting work, always check the *next available* task in the ordered list.

## Example Task Update

When updating a task pair from "In Progress" to "Completed":

```markdown
## In Progress Tasks

- [ ] Implement database schema
- [ ] Add tests for database schema
- [ ] Create API endpoints for data access
- [ ] Add tests for API endpoints

## Completed Tasks

- [x] Set up project structure
- [x] Add tests for project structure (if applicable)
- [x] Configure environment variables
- [x] Add tests for environment variables (if applicable)
```

Should become:

```markdown
## In Progress Tasks

- [ ] Create API endpoints for data access
- [ ] Add tests for API endpoints

## Completed Tasks

- [x] Set up project structure
- [x] Add tests for project structure (if applicable)
- [x] Configure environment variables
- [x] Add tests for environment variables (if applicable)
- [x] Implement database schema
- [x] Add tests for database schema
```