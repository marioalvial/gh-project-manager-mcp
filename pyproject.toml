[project]
name = "gh-project-manager-mcp"
version = "0.1.0"
description = ""
authors = [
    {name = "Mário Alvial", email = "mse.alvial@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "result (>=0.17.0,<0.18.0)",
    "python-dotenv (>=1.1.0,<2.0.0)"
]

[tool.poetry]
name = "gh-project-manager-mcp"
version = "0.1.0"
description = ""
authors = ["Mário Alvial <mse.alvial@gmail.com>"]
readme = "README.md"
packages = [{include = "gh_project_manager_mcp", from = "src"}]
dependencies = { python = ">=3.11", mcp = {version = "^1.6.0", extras = ["cli"]}, uvicorn = ">=0.23.1", starlette = ">=0.36.0" }

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
pytest-mock = "^3.14.0"
pytest-cov = "^5.0.0"
pytest-asyncio = "^0.23.5"
# black = "^25.1.0"  # Black can be removed as Ruff handles formatting
ruff = "^0.5.1" # Or latest version
python-dotenv = "^1.0.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Use python 3.11 features
target-version = "py311"
line-length = 88 # Match Black's default, adjust if needed

[tool.ruff.lint]
# Enable Pyflakes (F), pycodestyle (E, W), isort (I), pydocstyle (D)
select = ["E", "F", "W", "I", "D"]

# Optionally ignore specific rules if needed, e.g., D100 (missing module docstring)
# ignore = ["D100"]

[tool.ruff.lint.pydocstyle]
# Choose a convention if desired (e.g., "google", "numpy", "pep257")
# convention = "google"

[tool.ruff.format]
# Configure formatter options if needed (defaults match Black mostly)
# quote-style = "double"
# indent-style = "space"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "asyncio: mark a test as an asyncio coroutine"
]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = ["src/gh_project_manager_mcp"]
omit = [
    "src/server.py",
    "tests/*",
    "**/__pycache__/*",
    "**/.pytest_cache/*",
    "**/venv/*",
    "**/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    # Skip any pragma comments
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "pass",
    "raise NotImplementedError",
    "raise ImportError",
    "except ImportError",
    "if 0:",
    "if False:",
    # Skip print statements used for warnings/debugging
    "print\\(",
    "print\\s*\\(",
    # Skip abstract methods
    "@abstractmethod",
    # Skip code marked as not implemented yet
    "# TODO:",
    "# FIXME:",
    "NotImplementedError",
]

[tool.semantic_release]
version_variable = ["pyproject.toml:version", "src/gh_project_manager_mcp/__init__.py:__version__"]
version_toml = ["pyproject.toml:project.version", "pyproject.toml:tool.poetry.version"] 
branch = "main"
changelog_file = "CHANGELOG.md"
build_command = "pip install poetry && poetry build"
dist_path = "dist/"
upload_to_release = true
upload_to_pypi = false
remove_dist = false
patch_without_tag = true
commit_parser = "conventional"
